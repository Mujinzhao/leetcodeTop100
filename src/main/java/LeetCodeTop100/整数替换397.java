package LeetCodeTop100;

/**
 * @ClassName 整数替换397
 * @Author zhangxinkun
 * @Date 2019/12/30  5:08 PM
 * @Version 1.0
 */

/**
 * 给定一个正整数 n，你可以做如下操作：
 *
 * 1. 如果 n 是偶数，则用 n / 2替换 n。
 * 2. 如果 n 是奇数，则可以用 n + 1或n - 1替换 n。
 * n 变为 1 所需的最小替换次数是多少？
 *
 * 示例 1:
 *
 * 输入:
 * 8
 *
 * 输出:
 * 3
 *
 * 解释:
 * 8 -> 4 -> 2 -> 1
 * 示例 2:
 *
 * 输入:
 * 7
 *
 * 输出:
 * 4
 *
 * 解释:
 * 7 -> 8 -> 4 -> 2 -> 1
 * 或
 * 7 -> 6 -> 3 -> 2 -> 1
 *
 * 解析：当然，用搜索，也能做出来，但是效率不高，这里题目的核心就是判断，怎样操作能使数字最低位为1，其他位都为0；
 * 如果是偶数，很确定，直接左移一位，如果是奇数的话，：如果下一位也为1，则选择+1，这样能，一次消灭掉2个1。
 */
public class 整数替换397 {
    int integerReplacement(int n) {
        int ret = 0;
        while(n > 3){
            if(n % 2 == 1){
                n >>= 1;
                if(n % 2 == 1){
                    n ++;
                }
                ret += 2;
            }
            else{
                n >>= 1;
                ret++;
            }
        }
        return ret + n - 1;
    }
}
